create table brigade
(
    id        integer generated by default as identity
        primary key,
    type      smallint,
    sector_id integer
);

alter table brigade
    owner to postgres;

create table route
(
    id    integer generated by default as identity
        primary key,
    name  varchar(255),
    price integer
);

alter table route
    owner to postgres;

create table sector
(
    id               integer generated by default as identity
        primary key,
    name             varchar(40)
        constraint uk_gt10yoxplooy0sueukkysbjrr
            unique,
    administrator_id integer
);

alter table sector
    owner to postgres;

alter table brigade
    add constraint fksp36thh6pcuslexpmamq5ywor
        foreign key (sector_id) references sector;

create table specialization
(
    id   smallint generated by default as identity
        primary key,
    name varchar(20)
        constraint uk_e17ai04xje55nwnjss2st2fyh
            unique
);

alter table specialization
    owner to postgres;

create table staff
(
    id                integer generated by default as identity
        primary key,
    birthdate         date,
    full_name         varchar(60),
    hire_date         date,
    is_male           boolean,
    salary            integer,
    brigade_id        integer
        constraint fkrmn8djgb4snv1oo5a8ijq8uey
            references brigade,
    sector_id         integer
        constraint fklvxjwa95w3e16grnlvfylrhgn
            references sector,
    specialization_id smallint
        constraint fktc7si2s6ir76pse5294xk2bma
            references specialization
);

alter table staff
    owner to postgres;

alter table sector
    add constraint fkqvwarfu3nckt8y37wwr2nu6nu
        foreign key (administrator_id) references staff;

create table station
(
    id   integer generated by default as identity
        primary key,
    city varchar(20),
    name varchar(20),
    constraint ukeicmx3jdg6t9kwv51kx5i8aei
        unique (city, name)
);

alter table station
    owner to postgres;

create table route_station
(
    id         integer generated by default as identity
        primary key,
    route_time integer,
    time_stop  smallint,
    route_id   integer
        constraint fkb7lhgapsmdgjls1s3lxhsllas
            references route,
    station_id integer
        constraint fk2e184eo4cipupq3pc4x2iyahd
            references station
);

alter table route_station
    owner to postgres;

create table train
(
    id                integer generated by default as identity
        primary key,
    first_date        date,
    seats_num         smallint,
    type              smallint,
    repair_brigade_id integer
        constraint fk3dptruxqjn95ujncivb6rgxer
            references brigade,
    station_id        integer
        constraint fkc72gg7y1mvxv923yl50cj0xkw
            references station,
    train_brigade_id  integer
        constraint uk_ee0lmit3r3qwoc24mmry2s5lm
            unique
        constraint fkqkrg61rs0h0enwjehj0c9vuft
            references brigade
);

alter table train
    owner to postgres;

create table repair
(
    id          integer generated by default as identity
        primary key,
    description varchar(255),
    end_date    date,
    start_date  date,
    brigade_id  integer
        constraint fk6wlsl88wv4cbovn2hxjwg8gj7
            references brigade,
    train_id    integer
        constraint fk9gh8pefifjbhsns3misxn7209
            references train
);

alter table repair
    owner to postgres;

create table tech_inspection
(
    id         integer generated by default as identity
        primary key,
    date       date,
    brigade_id integer
        constraint fkgvmq2mqa1w6r41egd575xt4ye
            references brigade,
    train_id   integer
        constraint fkhgnfmlt5sq52kv7xbt4k7up7p
            references train
);

alter table tech_inspection
    owner to postgres;

create table train_schedule
(
    id        integer generated by default as identity
        primary key,
    direction boolean default true not null,
    time      timestamp(0),
    route_id  integer
        constraint fk5cowphn0di7dhbheo7miils7l
            references route,
    train_id  integer
        constraint fkievh47dn31fxyth9oc0sactio
            references train
);

alter table train_schedule
    owner to postgres;

create table canseled_run
(
    id          integer not null
        primary key
        constraint fkevrgmrrlnqny3yiqspj43mfc0
            references train_schedule,
    description varchar(255)
);

alter table canseled_run
    owner to postgres;

create table delay
(
    time              smallint,
    route_station_id  integer not null
        constraint fk8mqglqb0e1x0q9yh11oxu31yo
            references route_station,
    train_schedule_id integer not null
        constraint fk75ang5fwqk14496npvea6rmrq
            references train_schedule,
    primary key (route_station_id, train_schedule_id)
);

alter table delay
    owner to postgres;

create table ticket
(
    id                integer generated by default as identity
        primary key,
    full_name         varchar(60),
    luggage           boolean default false not null,
    status            smallint,
    time              timestamp(0),
    end_station_id    integer
        constraint fkix83nof25pbd89pibh7itvi2n
            references route_station,
    start_station_id  integer
        constraint fkrpmgr6w0lwsdyv1edgun6syto
            references route_station,
    train_schedule_id integer
        constraint fkltr0aqtm4jucqxq8l8wc1t80w
            references train_schedule
);

alter table ticket
    owner to postgres;

create table medical_exam
(
    id       integer generated by default as identity
        primary key,
    date     date not null,
    staff_id integer
        constraint fk2t8ew9s880lrgsb8p1dd3bm7t
            references staff
);

alter table medical_exam
    owner to postgres;

create function fill_tables() returns void
    language plpgsql
as
$$
declare 
    _sector_id int;
    brigade_row record;
    driver_row record;
    _brigade_id int;
    i int;
    train_brigade_id int;
    route_id int;
    train_id int;
begin
    TRUNCATE brigade, medical_exam, repair, sector, staff, sector, specialization, tech_inspection, ticket,canseled_run, delay, train_schedule, route_station, route, train, brigade, station RESTART IDENTITY;
    
    INSERT INTO specialization(name) VALUES ('водитель поезда');
    INSERT INTO specialization(name) VALUES ('диспетчер');
    INSERT INTO specialization(name) VALUES ('ремонтник') ;
    INSERT INTO specialization(name) VALUES ('кассир');
    INSERT INTO specialization(name) VALUES ('администрация');

    INSERT INTO sector(name) VALUES ('Восточно-Сибирский');
    INSERT INTO sector(name) VALUES ('Западно-Сибирский');
    INSERT INTO sector(name) VALUES ('Красноярский');

    INSERT INTO station(city) values ('Новокузнецк');
    INSERT INTO station(city) values ('Прокопьевск');
    INSERT INTO station(city) values ('Белово');
    INSERT INTO station(city,name) values ('Новосибирск','Главный');
    INSERT INTO station(city) values ('Бердск');
    INSERT INTO station(city) values ('Омск');
    INSERT INTO station(city) values ('Томск');
    INSERT INTO station(city) values ('Красноярск');
    INSERT INTO station(city) values ('Иркутск');


    insert into route(name,price) values ('Новокузнецк-Томск',2000) returning id into route_id;
    insert into route_station(route_id,station_id,route_time,time_stop)
    values
    ((select id from route where name = 'Новокузнецк-Томск'),
        (select id from station where city = 'Новокузнецк'),0,null),
    ((select id from route where name = 'Новокузнецк-Томск'),
        (select id from station where city = 'Прокопьевск'),40,5),
    ((select id from route where name = 'Новокузнецк-Томск'),
        (select id from station where city = 'Белово'),146,5),
    ((select id from route where name = 'Новокузнецк-Томск'),
        (select id from station where city = 'Томск'),720,null);
    INSERT INTO brigade(sector_id,type) values ((select id from sector where name = 'Западно-Сибирский'),0)
    returning id into _brigade_id;
    INSERT INTO brigade(sector_id,type) values ((select id from sector where name = 'Западно-Сибирский'),1)
    returning id into train_brigade_id;
    insert into train(type,station_id,seats_num,first_date,repair_brigade_id,train_brigade_id) values
        (1, (select id from station where city = 'Новокузнецк'),200,generate_date(2000,2015),_brigade_id,train_brigade_id)
         returning id into train_id;
    perform fill_train_schedule(train_id,route_id);


    insert into route(name,price) values ('Новосибирск-Бердск',200) returning id into route_id;
    insert into route_station(route_id,station_id,route_time,time_stop)
    values
    ((select id from route where name = 'Новосибирск-Бердск'),
           (select id from station where city = 'Новосибирск'),0,null),
    ((select id from route where name = 'Новосибирск-Бердск'),
           (select id from station where city = 'Бердск'),60,null);
    INSERT INTO brigade(sector_id,type) values ((select id from sector where name = 'Западно-Сибирский'),0)
    returning id into _brigade_id;
    INSERT INTO brigade(sector_id,type) values ((select id from sector where name = 'Западно-Сибирский'),1)
    returning id into train_brigade_id;
    insert into train(type,station_id,seats_num,first_date,repair_brigade_id,train_brigade_id) values
        (0, (select id from station where city = 'Новосибирск'),300,generate_date(2000,2015),_brigade_id,train_brigade_id)
        returning id into train_id;
    perform fill_train_schedule(train_id,route_id);


    insert into route(name,price) values ('Новосибирск-Томск',1300) returning id into route_id;
    insert into route_station(route_id,station_id,route_time,time_stop)
    values
    ((select id from route where name = 'Новосибирск-Томск'),
           (select id from station where city = 'Новосибирск'),0,null),
    ((select id from route where name = 'Новосибирск-Томск'),
           (select id from station where city = 'Томск'),400,null);
    INSERT INTO brigade(sector_id,type) values ((select id from sector where name = 'Западно-Сибирский'),1)
    returning id into train_brigade_id;
    insert into train(type,station_id,seats_num,first_date,repair_brigade_id,train_brigade_id) values
        (1, (select id from station where city = 'Новосибирск'),200,generate_date(2000,2015),_brigade_id,train_brigade_id)
         returning id into train_id;
    perform fill_train_schedule(train_id,route_id);

    insert into route(name,price) values ('Красноярск-Новосибирск',2000) returning id into route_id;
    insert into route_station(route_id,station_id,route_time,time_stop)
    values
    ((select id from route where name = 'Красноярск-Новосибирск'),
       (select id from station where city = 'Красноярск'),0,null),
    ((select id from route where name = 'Красноярск-Новосибирск'),
           (select id from station where city = 'Новосибирск'),700,null);
    INSERT INTO brigade(sector_id,type) values ((select id from sector where name = 'Красноярский'),0)
    returning id into _brigade_id;
    INSERT INTO brigade(sector_id,type) values ((select id from sector where name = 'Красноярский'),1)
    returning id into train_brigade_id;
    insert into train(type,station_id,seats_num,first_date,repair_brigade_id,train_brigade_id) values
        (1, (select id from station where city = 'Красноярск'),200,generate_date(2000,2015),_brigade_id,train_brigade_id)
         returning id into train_id;
    perform fill_train_schedule(train_id,route_id);

    insert into route(name,price) values ('Новокузнецк-Омск',2500) returning id into route_id;
    insert into route_station(route_id,station_id,route_time,time_stop)
    values
    ((select id from route where name = 'Новокузнецк-Омск'),
           (select id from station where city = 'Новокузнецк'),0,null),
    ((select id from route where name = 'Новокузнецк-Омск'),
           (select id from station where city = 'Прокопьевск'),40,5),
    ((select id from route where name = 'Новокузнецк-Омск'),
           (select id from station where city = 'Белово'),146,5),
    ((select id from route where name = 'Новокузнецк-Омск'),
           (select id from station where city = 'Новосибирск'),422,56),
    ((select id from route where name = 'Новокузнецк-Омск'),
           (select id from station where city = 'Омск'),1003,null);
    INSERT INTO brigade(sector_id,type) values ((select id from sector where name = 'Западно-Сибирский'),0)
    returning id into _brigade_id;
    INSERT INTO brigade(sector_id,type) values ((select id from sector where name = 'Западно-Сибирский'),1)
    returning id into train_brigade_id;
    insert into train(type,station_id,seats_num,first_date,repair_brigade_id,train_brigade_id) values
        (1, (select id from station where city = 'Омск'),200,generate_date(2000,2015),_brigade_id,train_brigade_id)
         returning id into train_id;
    perform fill_train_schedule(train_id,route_id);

    insert into route(name,price) values ('Новосибирск-Иркутск',2800) returning id into route_id;
    insert into route_station(route_id,station_id,route_time,time_stop)
    values
    ((select id from route where name = 'Новосибирск-Иркутск'),
           (select id from station where city = 'Новосибирск'),0,null),
    ((select id from route where name = 'Новосибирск-Иркутск'),
           (select id from station where city = 'Иркутск'),540,null);
    INSERT INTO brigade(sector_id,type) values ((select id from sector where name = 'Восточно-Сибирский'),0)
    returning id into _brigade_id;
    INSERT INTO brigade(sector_id,type) values ((select id from sector where name = 'Восточно-Сибирский'),1)
    returning id into train_brigade_id;
    insert into train(type,station_id,seats_num,first_date,repair_brigade_id,train_brigade_id) values
        (1, (select id from station where city = 'Иркутск'),200,generate_date(2000,2015),_brigade_id,train_brigade_id)
         returning id into train_id;
    perform fill_train_schedule(train_id,route_id);

    for brigade_row in
        select * from brigade where type = 0
    loop
        for i in 1..15 LOOP
            perform insert_staff('ремонтник',brigade_row.sector_id,brigade_row.id);
        end loop;
    end loop;
    for brigade_row in
        select * from brigade where type = 1
    loop
        for i in 1..4 LOOP
            perform insert_staff('водитель поезда',brigade_row.sector_id,brigade_row.id);
        end loop;
    end loop;

    for driver_row in
        select * from staff where specialization_id = (select id from specialization where name = 'водитель поезда')
    loop
        for i in date_part('year', driver_row.hire_date) .. 2022 loop
            if floor(random()*5)::int != 0 then
                insert into medical_exam(date,staff_id) values
                (generate_date(i,i+1),driver_row.id);
--             else
--                 raise notice 'skip';
            end if;
        end loop;
    end loop;

    FOR _sector_id IN
        SELECT id FROM sector
    LOOP
        UPDATE sector SET administrator_id = insert_staff('администрация',brigade_row.sector_id) WHERE id = _sector_id;
        for i in 1..5 LOOP
            perform insert_staff('диспетчер',brigade_row.sector_id);
        end loop;
        for i in 1..10 LOOP
            perform insert_staff('кассир',brigade_row.sector_id);
        end loop;
    END LOOP;
    
    perform fill_tickets();
end
$$;

alter function fill_tables() owner to postgres;

create function generate_name(is_male boolean) returns character varying
    language plpgsql
as
$$
declare
    male_name_list varchar[] := array['Александр','Дмитрий','Максим','Сергей','Андрей',
        'Алексей','Артём','Илья','Михаил','Роман','Егор','Иван','Денис','Евгений',
        'Даниил','Владислав','Игорь','Владимир','Павел','Константин','Олег'];
    female_name_list varchar[] := array['Анастасия','Анна','Мария','Елена','Дарья',
        'Ирина','Екатерина','Арина','Ольга','Юлия','Татьяна','Наталья','Виктория',
        'Елизавета','Ксения','Кристина','София','Марина','Светлана','Софья','Алиса'];
    second_name_list varchar[] := array['Иванов','Смирнов','Кузнецов','Петров',
        'Соколов','Михайлов','Федоров','Морозов','Волков','Алексеев','Лебедев',
        'Семенов','Егоров','Павлов','Козлов','Степанов','Николаев','Орлов',
        'Андреев','Никитин','Захаров','Зайцев','Соловьев','Воробьев','Сергеев',
        'Кузьмин','Фролов','Александров','Королев','Киселев','Ильин','Максимов',
        'Сорокин', 'Белов', 'Медведев','Антонов','Жуков','Комаров','Давыдов',
        'Беляев','Сидоров','Титов','Марков','Миронов','Крылов','Куликов','Карпов',
        'Власов','Мельников','Денисов','Гаврилов','Казаков','Афанасьев','Данилов',
        'Тимофеев','Фомин','Чернов','Ефимов','Щербаков','Быков','Лазарев'];
    name varchar;
    second_name varchar;
    full_name varchar;
begin
    if is_male then
        name = male_name_list[floor(random()*array_length(male_name_list,1))::int+1];
        second_name = second_name_list[floor(random()*array_length(second_name_list,1))::int+1];
        full_name = name || ' ' || second_name;
    else
        name = female_name_list[floor(random()*array_length(female_name_list,1))::int+1];
        second_name = second_name_list[floor(random()*array_length(second_name_list,1))::int+1];
        full_name = name || ' ' || second_name || 'а';
    end if;
    return full_name;
end
$$;

alter function generate_name(boolean) owner to postgres;

create function generate_date(a integer, b integer) returns date
    language plpgsql
as
$$
declare
    rand_date varchar;
    year int;
    month int;
    day int;
begin
    day = floor(random()*28+1)::int;
    month = floor(random()*12+1)::int;
    year = a+floor(random()*(b-a))::int;
    rand_date = year::varchar||'-'||month::varchar||'-'||day::varchar;
    return rand_date::date;
end
$$;

alter function generate_date(integer, integer) owner to postgres;

create function insert_staff(spec_name character varying, sector_id integer, brigade_id integer DEFAULT NULL::integer) returns integer
    language plpgsql
as
$$
declare
    is_male boolean;
    spec_id integer;
    staff_id integer;
    salary integer;
begin
        if spec_name = 'водитель поезда' then
            salary = (6+floor(random()*3::int))*10000;
        elsif spec_name = 'диспетчер' then
            salary = (45+5*floor(random()*3::int))*1000;
        elsif spec_name = 'ремонтник' then
            salary = (35+5*floor(random()*8::int))*1000;
        elsif spec_name = 'кассир' then
            salary = (30+5*floor(random()*3::int))*1000;
        elsif spec_name = 'администрация' then
            salary = (8+floor(random()*5::int))*10000;
        end if;
        is_male := floor(random()*2::int);
        spec_id := (select id from specialization where name = spec_name);
        insert into staff(full_name,specialization_id,is_male,salary,birthdate,hire_date,sector_id,brigade_id)
        values (generate_name(is_male), spec_id,
                is_male, salary, generate_date(1960,1985),generate_date(2005,2022),sector_id,brigade_id)
        RETURNING id INTO staff_id;
        return staff_id;
        end
$$;

alter function insert_staff(varchar, integer, integer) owner to postgres;

create function fill_train_schedule(train_id integer, route_id integer) returns void
    language plpgsql
as
$$
declare
    route_record record;
    step int;
    date_loop date;
    start_time time;
    day_counter int;
    default_station int;
    direction bool;

    canseled1 int;
    canseled2 int;
begin
    select * from route_from_to() where id = route_id into route_record;
    default_station = (select station_id from train where id = train_id);
    if default_station = route_record.from_station then 
        direction = true;
    elsif default_station = route_record.to_station then 
        direction = false;
    else
        raise notice 'default_station warning';
    end if;
    step = floor((route_record.route_time+300)/1440)::int+1;
    start_time = make_time(mod(6+floor(random()*20)::int,24),0,0);
    date_loop = '2020-01-01';
    day_counter = 0;
    while date_loop < '2023-01-01' loop
            insert into train_schedule(route_id,train_id,time,direction) values
            (route_id,train_id,date_loop+start_time,direction) returning id into canseled1;
            direction = not direction;
            date_loop = date_loop + step;
            
            insert into train_schedule(route_id,train_id,time,direction) values
            (route_id,train_id,date_loop+start_time,direction) returning id into canseled2;
            date_loop = date_loop + step;
            direction = not direction;

            if floor(random()*100)::int = 0 then
                insert into canseled_run(id) values (canseled1),(canseled2);
                insert into repair(start_date,end_date,train_id,brigade_id) values
                    (date_loop-step*2,date_loop,train_id,(select repair_brigade_id from train where id = train_id));
            end if;

            day_counter = day_counter+step*2;
            if day_counter>30-step*2 then
                insert into tech_inspection(date,train_id,brigade_id) values
                    (date_loop,train_id,(select repair_brigade_id from train where id = train_id));
                date_loop = date_loop + 1;
                day_counter = 0;
            end if;
    end loop;
end
$$;

alter function fill_train_schedule(integer, integer) owner to postgres;

create function route_from_to()
    returns TABLE(id integer, name character varying, from_station integer, to_station integer, route_time integer)
    language sql
as
$$
select id, name, rs2.station_id as from_station, rs1.station_id as to_station, route_time
    from route
    left outer join (
        select route_id, station_id,route_time from route_station
        where route_station.time_stop is null and route_station.route_time !=0)
        as rs1 on rs1.route_id = route.id
    inner join (
        select route_id, station_id from route_station
        where route_station.time_stop is null and route_station.route_time =0)
        as rs2 on rs2.route_id = route.id;
$$;

alter function route_from_to() owner to postgres;

create function fill_tickets() returns void
    language plpgsql
as
$$
declare
schedule_rec record;
station_array int[];
time_shift int;
station_count int;
seats_num int;
delay_time int;
waiting_time int;
begin
    for schedule_rec in
        select train_schedule.id as id, time,route_id, direction,train_id from train_schedule
            left outer join canseled_run cr on train_schedule.id = cr.id
        where cr.id is null and time < now()
    loop
        station_array = array(select id from route_station where route_id = schedule_rec.route_id order by route_time);
        seats_num = (select train.seats_num from train where id = schedule_rec.train_id);
        station_count = array_length(station_array, 1);

        if schedule_rec.direction then
            for i in 1 .. station_count-1 loop
                time_shift = (select route_time from route_station where id = station_array[i]);
                delay_time = null;
                if floor(random()*30)::int = 0 then
                    delay_time  = 15+floor(random()*200)::int;
                    insert into delay(train_schedule_id,route_station_id,time)
                        values (schedule_rec.id,station_array[i],delay_time);
--                     exit;
                end if;
--                 raise notice 'd: %',delay_time ;

                for j in i+1 .. station_count loop
                        for k in 1 .. floor(random()*(seats_num/(station_count-1)))::int loop
                            if floor(random()*50)::int = 0 then
                                insert into ticket(train_schedule_id,full_name,status,time,start_station_id,end_station_id)
                                values (schedule_rec.id,generate_name(floor(random()*2)::int::boolean),1,schedule_rec.time+make_interval(mins=>time_shift)-make_interval(mins=>floor(30+random()*2000)::int),
                                station_array[i],station_array[j]);
                            elsif delay_time IS NOT NULL then
                                waiting_time = 15+floor(random()*300)::int;
--                                 raise notice 'wt: %, d: %', waiting_time,delay_time ;
                                if (waiting_time<delay_time) then
                                    insert into ticket(train_schedule_id,full_name,status,time,start_station_id,end_station_id)
                                    values (schedule_rec.id,generate_name(floor(random()*2)::int::boolean),1,schedule_rec.time+make_interval(mins=>time_shift)+make_interval(mins=>waiting_time),
                                    station_array[i],station_array[j]);
                                    
                                else
                                    insert into ticket(train_schedule_id,full_name,status,time,start_station_id,end_station_id)
                                    values (schedule_rec.id,generate_name(floor(random()*2)::int::boolean),0,schedule_rec.time+make_interval(mins=>time_shift)-make_interval(mins=>floor(30+random()*10000)::int),
                                    station_array[i],station_array[j]);
                                end if;
                            else
                                insert into ticket(train_schedule_id,full_name,status,time,start_station_id,end_station_id)
                                values (schedule_rec.id,generate_name(floor(random()*2)::int::boolean),0,schedule_rec.time+make_interval(mins=>time_shift)-make_interval(mins=>floor(30+random()*10000)::int),
                                station_array[i],station_array[j]);
                            end if;
                        end loop;
                end loop;
            end loop;
        else

            for i in reverse 2 .. station_count loop
                time_shift = (select route_time from route_station
                                where (route_id = (select route_id from route_station where id = station_array[i]))
                                        and (time_stop is null) and (route_time!=0)) -(select route_time from route_station where id = station_array[i]);

                if floor(random()*30)::int = 0 then
                    insert into delay(train_schedule_id,route_station_id,time)
                        values (schedule_rec.id,station_array[i],15+floor(random()*200)::int) returning time into delay_time;
                else
                    delay_time = null;
                end if;
                for j in 1 .. i-1 loop
                        for k in 1 .. floor(random()*(seats_num/(station_count-1)))::int loop
                            if floor(random()*50)::int = 0 then
                                insert into ticket(train_schedule_id,full_name,status,time,start_station_id,end_station_id)
                                values (schedule_rec.id,generate_name(floor(random()*2)::int::boolean),1,schedule_rec.time+make_interval(mins=>time_shift)-make_interval(mins=>floor(30+random()*2000)::int),
                                station_array[i],station_array[j]);
                            elsif delay_time IS NOT NULL then
                                waiting_time = 15+floor(random()*300)::int;
                                if (waiting_time<delay_time) then
                                    insert into ticket(train_schedule_id,full_name,status,time,start_station_id,end_station_id)
                                    values (schedule_rec.id,generate_name(floor(random()*2)::int::boolean),1,schedule_rec.time+make_interval(mins=>time_shift)+make_interval(mins=>waiting_time),
                                    station_array[i],station_array[j]);
                                else
                                    insert into ticket(train_schedule_id,full_name,status,time,start_station_id,end_station_id)
                                    values (schedule_rec.id,generate_name(floor(random()*2)::int::boolean),0,schedule_rec.time+make_interval(mins=>time_shift)-make_interval(mins=>floor(30+random()*10000)::int),
                                    station_array[i],station_array[j]);
                                end if;
                            else
                                insert into ticket(train_schedule_id,full_name,status,time,start_station_id,end_station_id)
                                values (schedule_rec.id,generate_name(floor(random()*2)::int::boolean),0,schedule_rec.time+make_interval(mins=>time_shift)-make_interval(mins=>floor(30+random()*10000)::int),
                                station_array[i],station_array[j]);
                            end if;
                        end loop;
                end loop;
            end loop;
        end if;
    end loop;
end
$$;

alter function fill_tickets() owner to postgres;

create function del_staff_trigger_function() returns trigger
    language plpgsql
as
$$
DECLARE
BEGIN
    DELETE from medical_exam where medical_exam.staff_id = OLD.id;
    RETURN OLD;
END
$$;

alter function del_staff_trigger_function() owner to postgres;

create trigger del_staff_trigger
    before delete
    on staff
    for each row
execute procedure del_staff_trigger_function();

create function del_station_trigger_function() returns trigger
    language plpgsql
as
$$
DECLARE
BEGIN
    raise Exception 'Delete station not allowed';
END
$$;

alter function del_station_trigger_function() owner to postgres;

create trigger del_station_trigger
    before delete
    on station
execute procedure del_station_trigger_function();


